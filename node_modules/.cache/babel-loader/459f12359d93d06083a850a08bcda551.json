{"ast":null,"code":"var _jsxFileName = \"/Users/achilles/Documents/GitHub/Find-Location-React-Redux/src/views/components/location-acquire.js\",\n    _s = $RefreshSig$();\n\nimport { connect } from \"react-redux\";\nimport { updateList } from \"../../redux/reducer\";\nimport { useState, useRef } from \"react\";\nimport axios from \"axios\";\nimport { Button, Input, Card, Col, Row } from \"antd\";\nimport styles from \"../scss/location-acquire.module.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst google = window.google;\n\nfunction LocationAcquire(props) {\n  _s();\n\n  const {\n    Search\n  } = Input;\n  const [userLocation, setUserLocation] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [timeZone, setTimeZone] = useState(\"\");\n  const [localTime, setLocalTime] = useState(\"\");\n  const searchRef = useRef(null);\n\n  function getLocation() {\n    setErrorMessage(\"\");\n\n    if (navigator.geolocation) {\n      //Get user location from browser\n      navigator.geolocation.getCurrentPosition(showPosition, showError);\n    } else {\n      setErrorMessage(\"Geolocation is not supported by this browser.\");\n    } //clear input content after searching\n\n\n    searchRef.current.setState({\n      value: \"\"\n    });\n  }\n\n  function showPosition(position) {\n    const geocoder = new google.maps.Geocoder(); //Get latitude and longitude\n\n    const lat = position.coords.latitude;\n    const lng = position.coords.longitude;\n    const latlng = {\n      lat,\n      lng\n    };\n    console.log(\"Latitude: \" + lat + \" Longitude: \" + lng);\n    geocoder.geocode({\n      location: latlng\n    }).then(response => {\n      if (response.results[0]) {\n        //Get address from latitude and longitude\n        const address = response.results[0].formatted_address;\n        const curLength = props.list.length;\n        const key = curLength !== 0 ? props.list[curLength - 1].key + 1 : 1;\n        const userLocationObj = {\n          key,\n          address,\n          lat,\n          lng\n        };\n        props.updateList([userLocationObj, ...props.list]); //latest is first\n\n        setUserLocation(address); //Get time zone and local time from latitude and longitude\n\n        getTimeZoneLocalTime(lat, lng);\n      } else {\n        setErrorMessage(\"No results found\");\n      }\n    }).catch(e => setErrorMessage(\"Geocoder failed due to: \" + e));\n  }\n\n  function showError(error) {\n    switch (error.code) {\n      case error.PERMISSION_DENIED:\n        setErrorMessage(\"User denied the request for Geolocation.\");\n        break;\n\n      case error.POSITION_UNAVAILABLE:\n        setErrorMessage(\"Location information is unavailable.\");\n        break;\n\n      case error.TIMEOUT:\n        setErrorMessage(\"The request to get user location timed out.\");\n        break;\n\n      default:\n        setErrorMessage(\"An unknown error occurred.\");\n        break;\n    }\n  }\n\n  async function getTimeZoneLocalTime(lat, lng) {\n    try {\n      var _resData$data, _resData$data2;\n\n      const resData = await axios({\n        url: \"http://api.timezonedb.com/v2.1/get-time-zone?key=SQL380MLF2C9&format=json&by=position&lat=\" + lat + \"&lng=\" + lng,\n        method: \"GET\"\n      });\n      console.log(\"getTimeZoneLocalTime Get resData: \", resData);\n      setTimeZone(resData === null || resData === void 0 ? void 0 : (_resData$data = resData.data) === null || _resData$data === void 0 ? void 0 : _resData$data.zoneName);\n      setLocalTime(resData === null || resData === void 0 ? void 0 : (_resData$data2 = resData.data) === null || _resData$data2 === void 0 ? void 0 : _resData$data2.formatted);\n    } catch (er) {\n      setErrorMessage(\"Error occurred to get time zone and local time from http://api.timezonedb.com/v2.1/get-time-zone\");\n    }\n  }\n\n  const onSearch = value => {\n    setErrorMessage(\"\");\n\n    if (value === \"\") {\n      console.log(\"onSearch: \", value);\n      setErrorMessage(\"Please input location name.\");\n      return;\n    }\n\n    const geocoder = new google.maps.Geocoder(); //Get latitude and longitude from address\n\n    geocoder.geocode({\n      address: value\n    }).then(({\n      results\n    }) => {\n      const lat = results[0].geometry.location.lat();\n      const lng = results[0].geometry.location.lng();\n      const curLength = props.list.length;\n      const key = curLength !== 0 ? props.list[curLength - 1].key + 1 : 1;\n      const userLocationObj = {\n        key,\n        address: value,\n        lat,\n        lng\n      };\n      props.updateList([userLocationObj, ...props.list]); //latest is first\n\n      setUserLocation(value); //address\n      //Get time zone and local time from latitude and longitude\n\n      getTimeZoneLocalTime(lat, lng); //clear input content after searching\n\n      searchRef.current.setState({\n        value: \"\"\n      });\n    }).catch(e => setErrorMessage(\"Geocoder failed due to: \" + e));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles[\"location-acquire-container\"],\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"location-acquire\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"location-acquire-btn\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"primary\",\n          size: \"large\",\n          block: true,\n          onClick: getLocation,\n          children: \"Acquire user location from browser\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"location-acquire-input\",\n        children: [/*#__PURE__*/_jsxDEV(Search, {\n          ref: searchRef,\n          placeholder: \"Please input location name\",\n          enterButton: \"Search\",\n          size: \"large\",\n          onSearch: onSearch\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"location-acquire-input-error\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: errorMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"location-acquire-result\",\n        children: /*#__PURE__*/_jsxDEV(Row, {\n          gutter: 12,\n          children: [/*#__PURE__*/_jsxDEV(Col, {\n            span: 8,\n            children: /*#__PURE__*/_jsxDEV(Card, {\n              title: \"Location\",\n              bordered: false,\n              children: userLocation\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            span: 8,\n            children: /*#__PURE__*/_jsxDEV(Card, {\n              title: \"Time Zone\",\n              bordered: false,\n              children: timeZone\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            span: 8,\n            children: /*#__PURE__*/_jsxDEV(Card, {\n              title: \"Local Time\",\n              bordered: false,\n              children: localTime\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 5\n  }, this);\n}\n\n_s(LocationAcquire, \"xjf2J6L+jORQ5tr7PTKaCHqFDxY=\");\n\n_c = LocationAcquire;\nexport default connect(state => {\n  const {\n    list\n  } = state;\n  return {\n    list\n  };\n}, {\n  updateList\n})(LocationAcquire);\n\nvar _c;\n\n$RefreshReg$(_c, \"LocationAcquire\");","map":{"version":3,"sources":["/Users/achilles/Documents/GitHub/Find-Location-React-Redux/src/views/components/location-acquire.js"],"names":["connect","updateList","useState","useRef","axios","Button","Input","Card","Col","Row","styles","google","window","LocationAcquire","props","Search","userLocation","setUserLocation","errorMessage","setErrorMessage","timeZone","setTimeZone","localTime","setLocalTime","searchRef","getLocation","navigator","geolocation","getCurrentPosition","showPosition","showError","current","setState","value","position","geocoder","maps","Geocoder","lat","coords","latitude","lng","longitude","latlng","console","log","geocode","location","then","response","results","address","formatted_address","curLength","list","length","key","userLocationObj","getTimeZoneLocalTime","catch","e","error","code","PERMISSION_DENIED","POSITION_UNAVAILABLE","TIMEOUT","resData","url","method","data","zoneName","formatted","er","onSearch","geometry","state"],"mappings":"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","sourcesContent":["import { connect } from \"react-redux\";\nimport { updateList } from \"../../redux/reducer\";\nimport { useState, useRef } from \"react\";\nimport axios from \"axios\";\nimport { Button, Input, Card, Col, Row } from \"antd\";\nimport styles from \"../scss/location-acquire.module.scss\";\n\nconst google = window.google;\n\nfunction LocationAcquire(props) {\n  const { Search } = Input;\n  const [userLocation, setUserLocation] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [timeZone, setTimeZone] = useState(\"\");\n  const [localTime, setLocalTime] = useState(\"\");\n  const searchRef = useRef(null);\n\n  function getLocation() {\n    setErrorMessage(\"\");\n\n    if (navigator.geolocation) {\n      //Get user location from browser\n      navigator.geolocation.getCurrentPosition(showPosition, showError);\n    } else {\n      setErrorMessage(\"Geolocation is not supported by this browser.\");\n    }\n\n    //clear input content after searching\n    searchRef.current.setState({ value: \"\" });\n  }\n\n  function showPosition(position) {\n    const geocoder = new google.maps.Geocoder();\n\n    //Get latitude and longitude\n    const lat = position.coords.latitude;\n    const lng = position.coords.longitude;\n    const latlng = { lat, lng };\n    console.log(\"Latitude: \" + lat + \" Longitude: \" + lng);\n\n    geocoder\n      .geocode({ location: latlng })\n      .then((response) => {\n        if (response.results[0]) {\n          //Get address from latitude and longitude\n          const address = response.results[0].formatted_address;\n          const curLength = props.list.length;\n          const key = curLength !== 0 ? props.list[curLength - 1].key + 1 : 1;\n\n          const userLocationObj = { key, address, lat, lng };\n\n          props.updateList([userLocationObj, ...props.list]); //latest is first\n          setUserLocation(address);\n\n          //Get time zone and local time from latitude and longitude\n          getTimeZoneLocalTime(lat, lng);\n        } else {\n          setErrorMessage(\"No results found\");\n        }\n      })\n      .catch((e) => setErrorMessage(\"Geocoder failed due to: \" + e));\n  }\n\n  function showError(error) {\n    switch (error.code) {\n      case error.PERMISSION_DENIED:\n        setErrorMessage(\"User denied the request for Geolocation.\");\n        break;\n      case error.POSITION_UNAVAILABLE:\n        setErrorMessage(\"Location information is unavailable.\");\n        break;\n      case error.TIMEOUT:\n        setErrorMessage(\"The request to get user location timed out.\");\n        break;\n      default:\n        setErrorMessage(\"An unknown error occurred.\");\n        break;\n    }\n  }\n\n  async function getTimeZoneLocalTime(lat, lng) {\n    try {\n      const resData = await axios({\n        url:\n          \"http://api.timezonedb.com/v2.1/get-time-zone?key=SQL380MLF2C9&format=json&by=position&lat=\" +\n          lat +\n          \"&lng=\" +\n          lng,\n        method: \"GET\",\n      });\n      console.log(\"getTimeZoneLocalTime Get resData: \", resData);\n\n      setTimeZone(resData?.data?.zoneName);\n      setLocalTime(resData?.data?.formatted);\n    } catch (er) {\n      setErrorMessage(\n        \"Error occurred to get time zone and local time from http://api.timezonedb.com/v2.1/get-time-zone\"\n      );\n    }\n  }\n\n  const onSearch = (value) => {\n    setErrorMessage(\"\");\n\n    if (value === \"\") {\n      console.log(\"onSearch: \", value);\n      setErrorMessage(\"Please input location name.\");\n      return;\n    }\n\n    const geocoder = new google.maps.Geocoder();\n\n    //Get latitude and longitude from address\n    geocoder\n      .geocode({ address: value })\n      .then(({ results }) => {\n        const lat = results[0].geometry.location.lat();\n        const lng = results[0].geometry.location.lng();\n\n        const curLength = props.list.length;\n        const key = curLength !== 0 ? props.list[curLength - 1].key + 1 : 1;\n        const userLocationObj = { key, address: value, lat, lng };\n\n        props.updateList([userLocationObj, ...props.list]); //latest is first\n        setUserLocation(value); //address\n\n        //Get time zone and local time from latitude and longitude\n        getTimeZoneLocalTime(lat, lng);\n\n        //clear input content after searching\n        searchRef.current.setState({ value: \"\" });\n      })\n      .catch((e) => setErrorMessage(\"Geocoder failed due to: \" + e));\n  };\n\n  return (\n    <div className={styles[\"location-acquire-container\"]}>\n      <div className=\"location-acquire\">\n        <div className=\"location-acquire-btn\">\n          <Button type=\"primary\" size=\"large\" block onClick={getLocation}>\n            Acquire user location from browser\n          </Button>\n        </div>\n        <div className=\"location-acquire-input\">\n          <Search\n            ref={searchRef}\n            placeholder=\"Please input location name\"\n            enterButton=\"Search\"\n            size=\"large\"\n            onSearch={onSearch}\n          />\n          {errorMessage && (\n            <div className=\"location-acquire-input-error\">\n              <span>{errorMessage}</span>\n            </div>\n          )}\n        </div>\n        <div className=\"location-acquire-result\">\n          <Row gutter={12}>\n            <Col span={8}>\n              <Card title=\"Location\" bordered={false}>\n                {userLocation}\n              </Card>\n            </Col>\n            <Col span={8}>\n              <Card title=\"Time Zone\" bordered={false}>\n                {timeZone}\n              </Card>\n            </Col>\n            <Col span={8}>\n              <Card title=\"Local Time\" bordered={false}>\n                {localTime}\n              </Card>\n            </Col>\n          </Row>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default connect(\n  (state) => {\n    const { list } = state;\n    return { list };\n  },\n  { updateList }\n)(LocationAcquire);\n"]},"metadata":{},"sourceType":"module"}