{"ast":null,"code":"var _jsxFileName = \"/Users/achilles/Documents/GitHub/Find-Location-React-Redux/src/views/components/location-map-show.js\",\n    _s = $RefreshSig$();\n\nimport { connect } from \"react-redux\";\nimport { React, useEffect, useRef } from \"react\";\nimport style from \"../scss/location-map-show.module.scss\";\nimport Map from \"./Map\";\nimport { APIKey, initialLocation, mapStyle } from \"../../config/ConfigurationData\";\nimport { Loader } from \"@googlemaps/js-api-loader\"; //Loading google map using googlemaps js-api-loader\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GoogleMapAPI = new Loader({\n  apiKey: APIKey,\n  language: \"English\"\n}); // const google = window.google;\n//Containers for instances created by google built-in constructors\n\nlet GoogleMap, Marker, Geocoder, MyInfoWindow;\n\nfunction LocationMapShow(props) {\n  _s();\n\n  // const mapRef = useRef(null);\n  useEffect(() => {\n    // if (!google) return; //do dothing when window google undefined\n    //Requesting data from google map api\n    GoogleMapAPI.load().then(() => {\n      //Initialize the map with arguments\n      GoogleMap = new window.google.maps.Map(document.getElementById(\"map\"), {\n        center: initialLocation,\n        zoom: 15\n      }); //Add a marker at initial location\n\n      Marker = new window.google.maps.Marker({\n        position: initialLocation,\n        map: GoogleMap\n      });\n      Marker.addListener(\"click\", () => {\n        MyInfoWindow.open(GoogleMap, Marker);\n      });\n      Geocoder = new window.google.maps.Geocoder();\n      MyInfoWindow = new window.google.maps.InfoWindow({\n        content: \"My Home: 70 Forest Manor Rd, North York, ON M2J 1G2\"\n      });\n      MyInfoWindow.open(GoogleMap, Marker);\n\n      if (props.list.length > 0) {\n        props.list.map((userLocationObj, index) => {\n          const location = {\n            lat: userLocationObj.lat,\n            lng: userLocationObj.lng\n          };\n\n          if (index === props.list.length - 1) {\n            //Center map on latest user location\n            GoogleMap.setCenter(location);\n          }\n\n          return Marker({\n            position: location,\n            GoogleMap\n          });\n        });\n      }\n    });\n  }, [props.list]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: style[\"location-map-container\"],\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map\",\n      className: style[\"location-map\"]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n\n_s(LocationMapShow, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = LocationMapShow;\nexport default connect(state => {\n  const {\n    list\n  } = state;\n  return {\n    list\n  };\n})(LocationMapShow);\n\nvar _c;\n\n$RefreshReg$(_c, \"LocationMapShow\");","map":{"version":3,"sources":["/Users/achilles/Documents/GitHub/Find-Location-React-Redux/src/views/components/location-map-show.js"],"names":["connect","React","useEffect","useRef","style","Map","APIKey","initialLocation","mapStyle","Loader","GoogleMapAPI","apiKey","language","GoogleMap","Marker","Geocoder","MyInfoWindow","LocationMapShow","props","load","then","window","google","maps","document","getElementById","center","zoom","position","map","addListener","open","InfoWindow","content","list","length","userLocationObj","index","location","lat","lng","setCenter","state"],"mappings":";;;AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,SAASC,KAAT,EAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC;AACA,OAAOC,KAAP,MAAkB,uCAAlB;AAEA,OAAOC,GAAP,MAAgB,OAAhB;AACA,SAASC,MAAT,EAAiBC,eAAjB,EAAkCC,QAAlC,QAAkD,gCAAlD;AACA,SAASC,MAAT,QAAuB,2BAAvB,C,CAGA;;;AACA,MAAMC,YAAY,GAAG,IAAID,MAAJ,CAAW;AAC9BE,EAAAA,MAAM,EAAEL,MADsB;AAE9BM,EAAAA,QAAQ,EAAE;AAFoB,CAAX,CAArB,C,CAMA;AAEA;;AACA,IAAIC,SAAJ,EAAeC,MAAf,EAAuBC,QAAvB,EAAiCC,YAAjC;;AAEA,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAAA;;AAC9B;AAEAhB,EAAAA,SAAS,CAAC,MAAM;AACd;AAGA;AACAQ,IAAAA,YAAY,CAACS,IAAb,GAAoBC,IAApB,CAAyB,MAAM;AAE7B;AACAP,MAAAA,SAAS,GAAG,IAAIQ,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmBlB,GAAvB,CAA2BmB,QAAQ,CAACC,cAAT,CAAwB,KAAxB,CAA3B,EAA2D;AACrEC,QAAAA,MAAM,EAAEnB,eAD6D;AAErEoB,QAAAA,IAAI,EAAE;AAF+D,OAA3D,CAAZ,CAH6B,CAQ7B;;AACAb,MAAAA,MAAM,GAAG,IAAIO,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmBT,MAAvB,CAA8B;AACrCc,QAAAA,QAAQ,EAAErB,eAD2B;AAErCsB,QAAAA,GAAG,EAAEhB;AAFgC,OAA9B,CAAT;AAKAC,MAAAA,MAAM,CAACgB,WAAP,CAAmB,OAAnB,EAA4B,MAAM;AAChCd,QAAAA,YAAY,CAACe,IAAb,CAAkBlB,SAAlB,EAA6BC,MAA7B;AACD,OAFD;AAIAC,MAAAA,QAAQ,GAAG,IAAIM,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmBR,QAAvB,EAAX;AACAC,MAAAA,YAAY,GAAG,IAAIK,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmBS,UAAvB,CAAkC;AAC/CC,QAAAA,OAAO,EAAE;AADsC,OAAlC,CAAf;AAIAjB,MAAAA,YAAY,CAACe,IAAb,CAAkBlB,SAAlB,EAA6BC,MAA7B;;AAEA,UAAII,KAAK,CAACgB,IAAN,CAAWC,MAAX,GAAoB,CAAxB,EAA2B;AACzBjB,QAAAA,KAAK,CAACgB,IAAN,CAAWL,GAAX,CAAe,CAACO,eAAD,EAAkBC,KAAlB,KAA4B;AACzC,gBAAMC,QAAQ,GAAG;AAAEC,YAAAA,GAAG,EAAEH,eAAe,CAACG,GAAvB;AAA4BC,YAAAA,GAAG,EAAEJ,eAAe,CAACI;AAAjD,WAAjB;;AAEA,cAAIH,KAAK,KAAKnB,KAAK,CAACgB,IAAN,CAAWC,MAAX,GAAoB,CAAlC,EAAqC;AACnC;AACAtB,YAAAA,SAAS,CAAC4B,SAAV,CAAoBH,QAApB;AACD;;AAED,iBAAOxB,MAAM,CAAC;AACZc,YAAAA,QAAQ,EAAEU,QADE;AAEZzB,YAAAA;AAFY,WAAD,CAAb;AAID,SAZD;AAaD;AAEF,KAzCD;AA4CD,GAjDQ,EAiDN,CAACK,KAAK,CAACgB,IAAP,CAjDM,CAAT;AAmDA,sBACE;AAAK,IAAA,SAAS,EAAE9B,KAAK,CAAC,wBAAD,CAArB;AAAA,2BACE;AAAK,MAAA,EAAE,EAAC,KAAR;AAAc,MAAA,SAAS,EAAEA,KAAK,CAAC,cAAD;AAA9B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GA3DQa,e;;KAAAA,e;AA6DT,eAAejB,OAAO,CAAE0C,KAAD,IAAW;AAChC,QAAM;AAAER,IAAAA;AAAF,MAAWQ,KAAjB;AACA,SAAO;AAAER,IAAAA;AAAF,GAAP;AACD,CAHqB,CAAP,CAGZjB,eAHY,CAAf","sourcesContent":["import { connect } from \"react-redux\";\nimport { React, useEffect, useRef } from \"react\";\nimport style from \"../scss/location-map-show.module.scss\";\n\nimport Map from \"./Map\";\nimport { APIKey, initialLocation, mapStyle } from \"../../config/ConfigurationData\";\nimport { Loader } from \"@googlemaps/js-api-loader\";\n\n\n//Loading google map using googlemaps js-api-loader\nconst GoogleMapAPI = new Loader({\n  apiKey: APIKey,\n  language: \"English\",\n});\n\n\n// const google = window.google;\n\n//Containers for instances created by google built-in constructors\nlet GoogleMap, Marker, Geocoder, MyInfoWindow;\n\nfunction LocationMapShow(props) {\n  // const mapRef = useRef(null);\n\n  useEffect(() => {\n    // if (!google) return; //do dothing when window google undefined\n\n\n    //Requesting data from google map api\n    GoogleMapAPI.load().then(() => {\n\n      //Initialize the map with arguments\n      GoogleMap = new window.google.maps.Map(document.getElementById(\"map\"), {\n        center: initialLocation,\n        zoom: 15,\n      });\n\n      //Add a marker at initial location\n      Marker = new window.google.maps.Marker({\n        position: initialLocation,\n        map: GoogleMap,\n      });\n\n      Marker.addListener(\"click\", () => {\n        MyInfoWindow.open(GoogleMap, Marker);\n      });\n\n      Geocoder = new window.google.maps.Geocoder();\n      MyInfoWindow = new window.google.maps.InfoWindow({\n        content: \"My Home: 70 Forest Manor Rd, North York, ON M2J 1G2\",\n      });\n\n      MyInfoWindow.open(GoogleMap, Marker);\n\n      if (props.list.length > 0) {\n        props.list.map((userLocationObj, index) => {\n          const location = { lat: userLocationObj.lat, lng: userLocationObj.lng };\n  \n          if (index === props.list.length - 1) {\n            //Center map on latest user location\n            GoogleMap.setCenter(location);\n          }\n  \n          return Marker({\n            position: location,\n            GoogleMap,\n          });\n        });\n      }\n\n    });\n\n    \n  }, [props.list]);\n\n  return (\n    <div className={style[\"location-map-container\"]}>\n      <div id=\"map\" className={style[\"location-map\"]}></div>\n    </div>\n  );\n}\n\nexport default connect((state) => {\n  const { list } = state;\n  return { list };\n})(LocationMapShow);\n"]},"metadata":{},"sourceType":"module"}