{"ast":null,"code":"var _jsxFileName = \"/Users/achilles/Documents/GitHub/Find-Location-React-Redux/src/views/components/location-acquire.js\",\n    _s = $RefreshSig$();\n\nimport { connect } from \"react-redux\";\nimport { updateList } from \"../../redux/reducer\";\nimport { useState, useRef } from \"react\";\nimport axios from \"axios\";\nimport { Button, Input, Card, Col, Row } from \"antd\";\nimport styles from \"../scss/location-acquire.module.scss\";\nimport { APIKey, initialLocation } from \"../../config/ConfigurationData\";\nimport { Loader } from \"@googlemaps/js-api-loader\"; //Loading google map using googlemaps js-api-loader\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GoogleMapAPI = new Loader({\n  apiKey: APIKey,\n  language: \"English\"\n}); //Containers for instances created by google built-in constructors\n\nlet GoogleMap, Marker, Geocoder, MyInfoWindow;\n\nfunction LocationAcquire(props) {\n  _s();\n\n  const {\n    Search\n  } = Input;\n  const [userLocation, setUserLocation] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [timeZone, setTimeZone] = useState(\"\");\n  const [localTime, setLocalTime] = useState(\"\");\n  const searchRef = useRef(null);\n\n  function getLocation() {\n    setErrorMessage(\"\");\n\n    if (navigator.geolocation) {\n      //Get user location from browser\n      navigator.geolocation.getCurrentPosition(showPosition, showError);\n    } else {\n      setErrorMessage(\"Geolocation is not supported by this browser.\");\n    } //clear input content after searching\n\n\n    searchRef.current.setState({\n      value: \"\"\n    });\n  }\n\n  function showPosition(position) {\n    //Requesting data from google map api\n    GoogleMapAPI.load().then(() => {\n      //Initialize the map with arguments\n      GoogleMap = new window.google.maps.Map(document.getElementById(\"map\"), {\n        center: initialLocation,\n        zoom: 15\n      }); //Add a marker at initial location\n\n      Marker = new window.google.maps.Marker({\n        position: initialLocation,\n        map: GoogleMap\n      });\n      Marker.addListener(\"click\", () => {\n        MyInfoWindow.open(GoogleMap, Marker);\n      });\n      Geocoder = new window.google.maps.Geocoder();\n      MyInfoWindow = new window.google.maps.InfoWindow({\n        content: \"My Home: 70 Forest Manor Rd, North York, ON M2J 1G2\"\n      });\n      MyInfoWindow.open(GoogleMap, Marker); //Get latitude and longitude\n\n      const lat = position.coords.latitude;\n      const lng = position.coords.longitude;\n      const latlng = {\n        lat,\n        lng\n      };\n      console.log(\"Latitude: \" + lat + \" Longitude: \" + lng);\n      Geocoder.geocode({\n        location: latlng\n      }, (results, status) => {\n        console.log(results);\n        console.log(status);\n\n        if (status === \"OK\") {\n          //Get address from latitude and longitude\n          const address = results[0].formatted_address;\n          const curLength = props.list.length;\n          const key = curLength !== 0 ? props.list[curLength - 1].key + 1 : 1;\n          const userLocationObj = {\n            key,\n            address,\n            lat,\n            lng\n          };\n          props.updateList([userLocationObj, ...props.list]); //latest is first\n\n          setUserLocation(address); //Get time zone and local time from latitude and longitude\n\n          getTimeZoneLocalTime(lat, lng);\n        } else {\n          setErrorMessage(\"No results found\");\n        }\n      });\n    });\n  }\n\n  function showError(error) {\n    switch (error.code) {\n      case error.PERMISSION_DENIED:\n        setErrorMessage(\"User denied the request for Geolocation.\");\n        break;\n\n      case error.POSITION_UNAVAILABLE:\n        setErrorMessage(\"Location information is unavailable.\");\n        break;\n\n      case error.TIMEOUT:\n        setErrorMessage(\"The request to get user location timed out.\");\n        break;\n\n      default:\n        setErrorMessage(\"An unknown error occurred.\");\n        break;\n    }\n  }\n\n  async function getTimeZoneLocalTime(lat, lng) {\n    try {\n      var _resData$data, _resData$data2;\n\n      const resData = await axios({\n        url: \"http://api.timezonedb.com/v2.1/get-time-zone?key=SQL380MLF2C9&format=json&by=position&lat=\" + lat + \"&lng=\" + lng,\n        method: \"GET\"\n      });\n      console.log(\"getTimeZoneLocalTime Get resData: \", resData);\n      setTimeZone(resData === null || resData === void 0 ? void 0 : (_resData$data = resData.data) === null || _resData$data === void 0 ? void 0 : _resData$data.zoneName);\n      setLocalTime(resData === null || resData === void 0 ? void 0 : (_resData$data2 = resData.data) === null || _resData$data2 === void 0 ? void 0 : _resData$data2.formatted);\n    } catch (er) {\n      setErrorMessage(\"Error occurred to get time zone and local time from http://api.timezonedb.com/v2.1/get-time-zone\");\n    }\n  }\n\n  const onSearch = value => {\n    setErrorMessage(\"\");\n\n    if (value === \"\") {\n      console.log(\"onSearch: \", value);\n      setErrorMessage(\"Please input location name.\");\n      return;\n    } //Requesting data from google map api\n\n\n    GoogleMapAPI.load().then(() => {\n      //Initialize the map with arguments\n      GoogleMap = new window.google.maps.Map(document.getElementById(\"map\"), {\n        center: initialLocation,\n        zoom: 15\n      }); //Add a marker at initial location\n\n      Marker = new window.google.maps.Marker({\n        position: initialLocation,\n        map: GoogleMap\n      });\n      Marker.addListener(\"click\", () => {\n        MyInfoWindow.open(GoogleMap, Marker);\n      });\n      Geocoder = new window.google.maps.Geocoder();\n      MyInfoWindow = new window.google.maps.InfoWindow({\n        content: \"My Home: 70 Forest Manor Rd, North York, ON M2J 1G2\"\n      });\n      MyInfoWindow.open(GoogleMap, Marker); //Get latitude and longitude from address\n\n      Geocoder.geocode({\n        address: value\n      }, (results, status) => {\n        console.log(results);\n        console.log(status);\n\n        if (status === \"OK\") {\n          const lat = results[0].geometry.location.lat();\n          const lng = results[0].geometry.location.lng();\n          const curLength = props.list.length;\n          const key = curLength !== 0 ? props.list[curLength - 1].key + 1 : 1;\n          const userLocationObj = {\n            key,\n            address: value,\n            lat,\n            lng\n          };\n          props.updateList([userLocationObj, ...props.list]); //latest is first\n\n          setUserLocation(value); //address\n          //Get time zone and local time from latitude and longitude\n\n          getTimeZoneLocalTime(lat, lng); //clear input content after searching\n\n          searchRef.current.setState({\n            value: \"\"\n          });\n        } else {\n          searchRef.current.setState({\n            value: \"\"\n          });\n          alert(\"Error happened! Please check it.\");\n        }\n      });\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles[\"location-acquire-container\"],\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"location-acquire\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"location-acquire-btn\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"info\",\n          size: \"large\",\n          block: true,\n          onClick: getLocation,\n          children: \"Get Your Current Location\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"location-acquire-result\",\n        children: /*#__PURE__*/_jsxDEV(Row, {\n          gutter: 12,\n          children: [/*#__PURE__*/_jsxDEV(Col, {\n            span: 8,\n            children: /*#__PURE__*/_jsxDEV(Card, {\n              title: \"Location\",\n              bordered: false,\n              children: userLocation\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 229,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            span: 8,\n            children: /*#__PURE__*/_jsxDEV(Card, {\n              title: \"Time Zone\",\n              bordered: false,\n              children: timeZone\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 234,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            span: 8,\n            children: /*#__PURE__*/_jsxDEV(Card, {\n              title: \"Local Time\",\n              bordered: false,\n              children: localTime\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"location-acquire-input\",\n        children: [/*#__PURE__*/_jsxDEV(Search, {\n          ref: searchRef,\n          placeholder: \"Please input location name\",\n          enterButton: \"Search\",\n          size: \"large\",\n          onSearch: onSearch\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 11\n        }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"location-acquire-input-error\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: errorMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 217,\n    columnNumber: 5\n  }, this);\n}\n\n_s(LocationAcquire, \"xjf2J6L+jORQ5tr7PTKaCHqFDxY=\");\n\n_c = LocationAcquire;\nexport default connect(state => {\n  const {\n    list\n  } = state;\n  return {\n    list\n  };\n}, {\n  updateList\n})(LocationAcquire);\n\nvar _c;\n\n$RefreshReg$(_c, \"LocationAcquire\");","map":{"version":3,"sources":["/Users/achilles/Documents/GitHub/Find-Location-React-Redux/src/views/components/location-acquire.js"],"names":["connect","updateList","useState","useRef","axios","Button","Input","Card","Col","Row","styles","APIKey","initialLocation","Loader","GoogleMapAPI","apiKey","language","GoogleMap","Marker","Geocoder","MyInfoWindow","LocationAcquire","props","Search","userLocation","setUserLocation","errorMessage","setErrorMessage","timeZone","setTimeZone","localTime","setLocalTime","searchRef","getLocation","navigator","geolocation","getCurrentPosition","showPosition","showError","current","setState","value","position","load","then","window","google","maps","Map","document","getElementById","center","zoom","map","addListener","open","InfoWindow","content","lat","coords","latitude","lng","longitude","latlng","console","log","geocode","location","results","status","address","formatted_address","curLength","list","length","key","userLocationObj","getTimeZoneLocalTime","error","code","PERMISSION_DENIED","POSITION_UNAVAILABLE","TIMEOUT","resData","url","method","data","zoneName","formatted","er","onSearch","geometry","alert","state"],"mappings":"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","sourcesContent":["import { connect } from \"react-redux\";\nimport { updateList } from \"../../redux/reducer\";\nimport { useState, useRef } from \"react\";\nimport axios from \"axios\";\nimport { Button, Input, Card, Col, Row } from \"antd\";\nimport styles from \"../scss/location-acquire.module.scss\";\nimport { APIKey, initialLocation} from \"../../config/ConfigurationData\";\nimport { Loader } from \"@googlemaps/js-api-loader\";\n\n//Loading google map using googlemaps js-api-loader\nconst GoogleMapAPI = new Loader({\n  apiKey: APIKey,\n  language: \"English\",\n});\n\n//Containers for instances created by google built-in constructors\nlet GoogleMap, Marker, Geocoder, MyInfoWindow;\n\nfunction LocationAcquire(props) {\n  const { Search } = Input;\n  const [userLocation, setUserLocation] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [timeZone, setTimeZone] = useState(\"\");\n  const [localTime, setLocalTime] = useState(\"\");\n  const searchRef = useRef(null);\n\n  function getLocation() {\n    setErrorMessage(\"\");\n\n    if (navigator.geolocation) {\n      //Get user location from browser\n      navigator.geolocation.getCurrentPosition(showPosition, showError);\n    } else {\n      setErrorMessage(\"Geolocation is not supported by this browser.\");\n    }\n\n    //clear input content after searching\n    searchRef.current.setState({ value: \"\" });\n  }\n\n\n  function showPosition(position) {\n\n    //Requesting data from google map api\n    GoogleMapAPI.load().then(() => {\n\n      //Initialize the map with arguments\n      GoogleMap = new window.google.maps.Map(document.getElementById(\"map\"), {\n        center: initialLocation,\n        zoom: 15,\n      });\n\n      //Add a marker at initial location\n      Marker = new window.google.maps.Marker({\n        position: initialLocation,\n        map: GoogleMap,\n      });\n\n      Marker.addListener(\"click\", () => {\n        MyInfoWindow.open(GoogleMap, Marker);\n      });\n\n      Geocoder = new window.google.maps.Geocoder();\n      MyInfoWindow = new window.google.maps.InfoWindow({\n        content: \"My Home: 70 Forest Manor Rd, North York, ON M2J 1G2\",\n      });\n\n      MyInfoWindow.open(GoogleMap, Marker);\n\n      //Get latitude and longitude\n    const lat = position.coords.latitude;\n    const lng = position.coords.longitude;\n    const latlng = { lat, lng };\n    console.log(\"Latitude: \" + lat + \" Longitude: \" + lng);\n\n    Geocoder.geocode(\n      { \n        location: latlng \n      },(results, status) => {\n        console.log(results)\n        console.log(status)\n        if (status === \"OK\") {\n          //Get address from latitude and longitude\n          \n          const address = results[0].formatted_address;\n          const curLength = props.list.length;\n          const key = curLength !== 0 ? props.list[curLength - 1].key + 1 : 1;\n\n          const userLocationObj = { key, address, lat, lng };\n\n          props.updateList([userLocationObj, ...props.list]); //latest is first\n          setUserLocation(address);\n\n          //Get time zone and local time from latitude and longitude\n          getTimeZoneLocalTime(lat, lng);\n        } else {\n          setErrorMessage(\"No results found\");\n        }\n      })\n\n\n    });\n\n    \n  }\n\n  function showError(error) {\n    switch (error.code) {\n      case error.PERMISSION_DENIED:\n        setErrorMessage(\"User denied the request for Geolocation.\");\n        break;\n      case error.POSITION_UNAVAILABLE:\n        setErrorMessage(\"Location information is unavailable.\");\n        break;\n      case error.TIMEOUT:\n        setErrorMessage(\"The request to get user location timed out.\");\n        break;\n      default:\n        setErrorMessage(\"An unknown error occurred.\");\n        break;\n    }\n  }\n\n  async function getTimeZoneLocalTime(lat, lng) {\n    try {\n      const resData = await axios({\n        url:\n          \"http://api.timezonedb.com/v2.1/get-time-zone?key=SQL380MLF2C9&format=json&by=position&lat=\" +\n          lat +\n          \"&lng=\" +\n          lng,\n        method: \"GET\",\n      });\n      console.log(\"getTimeZoneLocalTime Get resData: \", resData);\n\n      setTimeZone(resData?.data?.zoneName);\n      setLocalTime(resData?.data?.formatted);\n    } catch (er) {\n      setErrorMessage(\n        \"Error occurred to get time zone and local time from http://api.timezonedb.com/v2.1/get-time-zone\"\n      );\n    }\n  }\n\n  const onSearch = (value) => {\n    setErrorMessage(\"\");\n\n    if (value === \"\") {\n      console.log(\"onSearch: \", value);\n      setErrorMessage(\"Please input location name.\");\n      return;\n    }\n\n    //Requesting data from google map api\n    GoogleMapAPI.load().then(() => {\n\n      //Initialize the map with arguments\n      GoogleMap = new window.google.maps.Map(document.getElementById(\"map\"), {\n        center: initialLocation,\n        zoom: 15,\n      });\n\n      //Add a marker at initial location\n      Marker = new window.google.maps.Marker({\n        position: initialLocation,\n        map: GoogleMap,\n      });\n\n      Marker.addListener(\"click\", () => {\n        MyInfoWindow.open(GoogleMap, Marker);\n      });\n\n      Geocoder = new window.google.maps.Geocoder();\n      MyInfoWindow = new window.google.maps.InfoWindow({\n        content: \"My Home: 70 Forest Manor Rd, North York, ON M2J 1G2\",\n      });\n\n      MyInfoWindow.open(GoogleMap, Marker);\n\n      //Get latitude and longitude from address\n    Geocoder.geocode({ address: value }\n    ,(results, status) => {\n      console.log(results)\n      console.log(status)\n    \n      if (status === \"OK\") {\n        const lat = results[0].geometry.location.lat();\n        const lng = results[0].geometry.location.lng();\n  \n        const curLength = props.list.length;\n        const key = curLength !== 0 ? props.list[curLength - 1].key + 1 : 1;\n        const userLocationObj = { key, address: value, lat, lng };\n  \n        props.updateList([userLocationObj, ...props.list]); //latest is first\n        setUserLocation(value); //address\n  \n        //Get time zone and local time from latitude and longitude\n        getTimeZoneLocalTime(lat, lng);\n  \n        //clear input content after searching\n        searchRef.current.setState({ value: \"\" });\n      } else {\n        searchRef.current.setState({ value: \"\" });\n        alert(\n          \"Error happened! Please check it.\"\n        );\n      }\n\n    })\n\n    });\n\n    \n  };\n\n  return (\n    <div className={styles[\"location-acquire-container\"]}>\n      <div className=\"location-acquire\">\n\n        <div className=\"location-acquire-btn\">\n          <Button type=\"info\" size=\"large\" block onClick={getLocation}>\n            Get Your Current Location\n          </Button>\n        </div>\n\n        <div className=\"location-acquire-result\">\n          <Row gutter={12}>\n            <Col span={8}>\n              <Card title=\"Location\" bordered={false}>\n                {userLocation}\n              </Card>\n            </Col>\n            <Col span={8}>\n              <Card title=\"Time Zone\" bordered={false}>\n                {timeZone}\n              </Card>\n            </Col>\n            <Col span={8}>\n              <Card title=\"Local Time\" bordered={false}>\n                {localTime}\n              </Card>\n            </Col>\n          </Row>\n        </div>\n\n        <div className=\"location-acquire-input\">\n          <Search\n            ref={searchRef}\n            placeholder=\"Please input location name\"\n            enterButton=\"Search\"\n            size=\"large\"\n            onSearch={onSearch}\n          />\n          {errorMessage && (\n            <div className=\"location-acquire-input-error\">\n              <span>{errorMessage}</span>\n            </div>\n          )}\n        </div>\n        \n      </div>\n    </div>\n  );\n}\n\nexport default connect(\n  (state) => {\n    const { list } = state;\n    return { list };\n  },\n  { updateList }\n)(LocationAcquire);\n"]},"metadata":{},"sourceType":"module"}